name: Deploy to TestFlight

on:
  workflow_dispatch:
    inputs:
      app_name:
        description: 'App Name'
        required: true
        default: 'My Flutter App'
      bundle_id:
        description: 'Bundle ID'
        required: true
        default: 'com.visios.nocode'
      version:
        description: 'App Version'
        required: true
        default: '1.0.0'
      build_number:
        description: 'Build Number'
        required: true
        default: '1'

jobs:
  deploy-testflight:
    runs-on: macos-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
        
    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.19.0'
        channel: 'stable'
        
    - name: Setup Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: latest-stable
        
    - name: Create Flutter project structure
      run: |
        echo "🏗️ Creating Flutter project structure..."
        mkdir -p flutter_project
        cd flutter_project
        
        # Initialize Flutter project
        flutter create . --org=${{ github.event.inputs.bundle_id }} --project-name=app
        
        # Create the app using our backend service
        echo "📱 Generating app from template..."
        curl -X POST "https://your-server.com/api/package-flutter" \
          -H "Content-Type: application/json" \
          -d '{
            "templateId": "default",
            "projectId": "github-action-build",
            "template": {},
            "deploymentInfo": {
              "appName": "${{ github.event.inputs.app_name }}",
              "bundleId": "${{ github.event.inputs.bundle_id }}",
              "version": "${{ github.event.inputs.version }}",
              "buildNumber": "${{ github.event.inputs.build_number }}"
            }
          }' \
          --output app_package.zip
          
        # Extract the generated app
        unzip -o app_package.zip
        
    - name: Configure iOS signing
      env:
        APP_STORE_CONNECT_ISSUER_ID: ${{ secrets.APP_STORE_CONNECT_ISSUER_ID }}
        APP_STORE_CONNECT_KEY_ID: ${{ secrets.APP_STORE_CONNECT_KEY_ID }}
        APP_STORE_CONNECT_PRIVATE_KEY: ${{ secrets.APP_STORE_CONNECT_PRIVATE_KEY }}
        APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
        IOS_CERTIFICATE_P12: ${{ secrets.IOS_CERTIFICATE_P12 }}
        IOS_CERTIFICATE_PASSWORD: ${{ secrets.IOS_CERTIFICATE_PASSWORD }}
        IOS_PROVISIONING_PROFILE: ${{ secrets.IOS_PROVISIONING_PROFILE }}
      run: |
        echo "🔐 Setting up iOS code signing..."
        
        # Create private_keys directory for App Store Connect API
        mkdir -p ~/private_keys
        echo "$APP_STORE_CONNECT_PRIVATE_KEY" > ~/private_keys/AuthKey_$APP_STORE_CONNECT_KEY_ID.p8
        
        # Setup keychain
        security create-keychain -p "" build.keychain
        security list-keychains -s build.keychain
        security default-keychain -s build.keychain
        security unlock-keychain -p "" build.keychain
        security set-keychain-settings -t 3600 -u build.keychain
        
        # Import certificate
        echo "$IOS_CERTIFICATE_P12" | base64 --decode > certificate.p12
        security import certificate.p12 -k build.keychain -P "$IOS_CERTIFICATE_PASSWORD" -T /usr/bin/codesign
        security set-key-partition-list -S apple-tool:,apple: -s -k "" build.keychain
        
        # Install provisioning profile
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
        echo "$IOS_PROVISIONING_PROFILE" | base64 --decode > ~/Library/MobileDevice/Provisioning\ Profiles/profile.mobileprovision
        
    - name: Build iOS app
      run: |
        cd flutter_project
        echo "🔨 Building Flutter iOS app..."
        
        # Get dependencies
        flutter pub get
        
        # Build iOS
        flutter build ios --release --no-codesign
        
        # Create archive
        xcodebuild -workspace ios/Runner.xcworkspace \
          -scheme Runner \
          -configuration Release \
          -destination generic/platform=iOS \
          -archivePath build/ios/Runner.xcarchive \
          archive
          
        # Export IPA
        xcodebuild -exportArchive \
          -archivePath build/ios/Runner.xcarchive \
          -exportPath build/ios/ipa \
          -exportOptionsPlist ios/exportOptions.plist
          
    - name: Upload to TestFlight
      env:
        APP_STORE_CONNECT_ISSUER_ID: ${{ secrets.APP_STORE_CONNECT_ISSUER_ID }}
        APP_STORE_CONNECT_KEY_ID: ${{ secrets.APP_STORE_CONNECT_KEY_ID }}
      run: |
        cd flutter_project
        echo "📤 Uploading to TestFlight..."
        
        # Find the IPA file
        IPA_PATH=$(find build/ios/ipa -name "*.ipa" | head -n 1)
        echo "📱 IPA Path: $IPA_PATH"
        
        # Upload using altool
        xcrun altool --upload-app \
          --type ios \
          --file "$IPA_PATH" \
          --apiKey $APP_STORE_CONNECT_KEY_ID \
          --apiIssuer $APP_STORE_CONNECT_ISSUER_ID \
          --show-progress
          
    - name: Create exportOptions.plist
      run: |
        cd flutter_project
        cat > ios/exportOptions.plist << EOF
        <?xml version="1.0" encoding="UTF-8"?>
        <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
        <plist version="1.0">
        <dict>
            <key>method</key>
            <string>app-store</string>
            <key>teamID</key>
            <string>${{ secrets.APPLE_TEAM_ID }}</string>
            <key>uploadBitcode</key>
            <false/>
            <key>uploadSymbols</key>
            <true/>
            <key>compileBitcode</key>
            <false/>
        </dict>
        </plist>
        EOF
        
    - name: Notify completion
      if: always()
      run: |
        if [ ${{ job.status }} == 'success' ]; then
          echo "✅ TestFlight deployment completed successfully!"
          echo "📱 App: ${{ github.event.inputs.app_name }}"
          echo "📦 Bundle ID: ${{ github.event.inputs.bundle_id }}"
          echo "🔢 Version: ${{ github.event.inputs.version }} (${{ github.event.inputs.build_number }})"
        else
          echo "❌ TestFlight deployment failed!"
        fi 