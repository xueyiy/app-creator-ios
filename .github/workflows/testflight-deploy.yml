name: Deploy to TestFlight

on:
  workflow_dispatch:
    inputs:
      project_data:
        description: 'Project data JSON (from your app)'
        required: false
        type: string
        default: '{}'
      app_name:
        description: 'App name for the build'
        required: true
        type: string
        default: 'NoCodeApp'
      bundle_id:
        description: 'Bundle ID (used if project_data not provided)'
        required: false
        type: string
        default: 'com.visios.nocode'
      version:
        description: 'App Version (used if project_data not provided)'
        required: false
        type: string
        default: '1.0.0'
      build_number:
        description: 'Build Number (used if project_data not provided)'
        required: false
        type: string
        default: '1'
      backend_url:
        description: 'Backend URL for app generation (or use BACKEND_URL secret)'
        required: false
        type: string
        default: ''

jobs:
  deploy-testflight:
    runs-on: macos-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
        
    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.19.0'
        channel: 'stable'
        
    - name: Setup Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: latest-stable
        
    - name: Create Flutter project structure
      run: |
        echo "🏗️ Creating Flutter project structure..."
        
        # Parse project data to extract app info
        echo "📊 Parsing project configuration..."
        PROJECT_DATA='${{ github.event.inputs.project_data }}'
        APP_NAME='${{ github.event.inputs.app_name }}'
        
        # Check if we have meaningful project_data (not just empty {})
        if [ "$PROJECT_DATA" != "{}" ] && [ "$PROJECT_DATA" != "" ]; then
          echo "📱 Using project_data for app configuration"
          # Extract deployment info from project data
          BUNDLE_ID=$(echo "$PROJECT_DATA" | jq -r '.deploymentInfo.bundleId // "${{ github.event.inputs.bundle_id }}"')
          VERSION=$(echo "$PROJECT_DATA" | jq -r '.deploymentInfo.version // "${{ github.event.inputs.version }}"')
          BUILD_NUMBER=$(echo "$PROJECT_DATA" | jq -r '.deploymentInfo.buildNumber // "'$(date +%s)'"')
          USE_PROJECT_DATA=true
        else
          echo "📱 Using manual inputs for app configuration"
          # Use manual inputs
          BUNDLE_ID='${{ github.event.inputs.bundle_id }}'
          VERSION='${{ github.event.inputs.version }}'
          BUILD_NUMBER='${{ github.event.inputs.build_number }}'
          USE_PROJECT_DATA=false
          # Create minimal project data for backend call
          PROJECT_DATA='{"templateId":"default","projectId":"github-action-build","template":{},"deploymentInfo":{"appName":"'$APP_NAME'","bundleId":"'$BUNDLE_ID'","version":"'$VERSION'","buildNumber":"'$BUILD_NUMBER'"}}'
        fi
        
        echo "📱 Final App Configuration:"
        echo "   Name: $APP_NAME"
        echo "   Bundle ID: $BUNDLE_ID"
        echo "   Version: $VERSION"
        echo "   Build Number: $BUILD_NUMBER"
        echo "   Using Project Data: $USE_PROJECT_DATA"
        
        # Store in environment for later steps
        echo "BUNDLE_ID=$BUNDLE_ID" >> $GITHUB_ENV
        echo "VERSION=$VERSION" >> $GITHUB_ENV
        echo "BUILD_NUMBER=$BUILD_NUMBER" >> $GITHUB_ENV
        echo "APP_NAME=$APP_NAME" >> $GITHUB_ENV
        echo "PROJECT_DATA=$PROJECT_DATA" >> $GITHUB_ENV
        
        mkdir -p flutter_project
        cd flutter_project
        
        # Initialize Flutter project
        flutter create . --org=$BUNDLE_ID --project-name=app
        
        # Create the app using our backend service
        echo "📱 Generating app from backend..."
        
        # Use BACKEND_URL secret if available, otherwise use input
        BACKEND_URL='${{ secrets.BACKEND_URL }}'
        if [ -z "$BACKEND_URL" ]; then
          BACKEND_URL='${{ github.event.inputs.backend_url }}'
        fi
        
        if [ -z "$BACKEND_URL" ]; then
          echo "❌ No backend URL provided! Please set BACKEND_URL secret or provide backend_url input"
          exit 1
        fi
        
        echo "🌐 Using backend URL: $BACKEND_URL"
        curl -X POST "$BACKEND_URL/api/package-flutter" \
          -H "Content-Type: application/json" \
          -d "$PROJECT_DATA" \
          --output app_package.zip
          
        # Extract the generated app
        echo "📦 Extracting generated Flutter app..."
        unzip -o app_package.zip
        
        # Create exportOptions.plist for later use
        echo "📝 Creating exportOptions.plist..."
        cat > ios/exportOptions.plist << EOF
        <?xml version="1.0" encoding="UTF-8"?>
        <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
        <plist version="1.0">
        <dict>
            <key>method</key>
            <string>app-store</string>
            <key>teamID</key>
            <string>${{ secrets.APPLE_TEAM_ID }}</string>
            <key>uploadBitcode</key>
            <false/>
            <key>uploadSymbols</key>
            <true/>
            <key>compileBitcode</key>
            <false/>
            <key>signingStyle</key>
            <string>automatic</string>
        </dict>
        </plist>
        EOF
        
    - name: Configure iOS signing
      env:
        APP_STORE_CONNECT_ISSUER_ID: ${{ secrets.APP_STORE_CONNECT_ISSUER_ID }}
        APP_STORE_CONNECT_KEY_ID: ${{ secrets.APP_STORE_CONNECT_KEY_ID }}
        APP_STORE_CONNECT_PRIVATE_KEY: ${{ secrets.APP_STORE_CONNECT_PRIVATE_KEY }}
        APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
        IOS_CERTIFICATE_P12: ${{ secrets.IOS_CERTIFICATE_P12 }}
        IOS_CERTIFICATE_PASSWORD: ${{ secrets.IOS_CERTIFICATE_PASSWORD }}
        IOS_PROVISIONING_PROFILE: ${{ secrets.IOS_PROVISIONING_PROFILE }}
      run: |
        echo "🔐 Setting up iOS code signing with fallback options..."
        
        # Create private_keys directory for App Store Connect API
        mkdir -p ~/private_keys
        echo "$APP_STORE_CONNECT_PRIVATE_KEY" > ~/private_keys/AuthKey_$APP_STORE_CONNECT_KEY_ID.p8
        
        # Setup certificates as fallback for manual signing if automatic fails
        if [ -n "$IOS_CERTIFICATE_P12" ] && [ -n "$IOS_CERTIFICATE_PASSWORD" ]; then
          echo "📋 Setting up manual signing certificates as fallback..."
          
          # Setup keychain
          security create-keychain -p "" build.keychain
          security list-keychains -s build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p "" build.keychain
          security set-keychain-settings -t 3600 -u build.keychain
          
          # Import certificate
          echo "$IOS_CERTIFICATE_P12" | base64 --decode > certificate.p12
          security import certificate.p12 -k build.keychain -P "$IOS_CERTIFICATE_PASSWORD" -T /usr/bin/codesign
          security set-key-partition-list -S apple-tool:,apple: -s -k "" build.keychain
          
          # Install provisioning profile
          if [ -n "$IOS_PROVISIONING_PROFILE" ]; then
            mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
            echo "$IOS_PROVISIONING_PROFILE" | base64 --decode > ~/Library/MobileDevice/Provisioning\ Profiles/profile.mobileprovision
          fi
          
          echo "✅ Manual signing certificates configured as fallback"
        else
          echo "⚠️  No manual signing certificates provided - will rely on automatic signing only"
        fi
        
        # Verify automatic signing prerequisites
        echo "🔍 Verifying automatic signing prerequisites..."
        echo "   Team ID: $APPLE_TEAM_ID"
        echo "   Bundle ID will be: com.visios.nocode"
        echo "   Expected: Xcode will automatically download certificates and profiles"
        
    - name: Build iOS app
      run: |
        cd flutter_project
        echo "🔨 Building Flutter iOS app..."
        
        # Configure iOS project with team ID for automatic signing
        echo "🔧 Setting up iOS project for automatic code signing..."
        
        # Set all targets to automatic signing with team ID
        sed -i '' 's/CODE_SIGN_STYLE = Manual;/CODE_SIGN_STYLE = Automatic;/g' ios/Runner.xcodeproj/project.pbxproj
        sed -i '' 's/DEVELOPMENT_TEAM = "";/DEVELOPMENT_TEAM = "${{ secrets.APPLE_TEAM_ID }}";/g' ios/Runner.xcodeproj/project.pbxproj
        sed -i '' 's/PROVISIONING_PROFILE_SPECIFIER = ".*";/PROVISIONING_PROFILE_SPECIFIER = "";/g' ios/Runner.xcodeproj/project.pbxproj
        
        # Ensure automatic signing is enabled for all configurations
        sed -i '' 's/CODE_SIGN_STYLE = Manual;/CODE_SIGN_STYLE = Automatic;/g' ios/Runner.xcodeproj/project.pbxproj
        sed -i '' 's/"CODE_SIGN_STYLE\[sdk=iphoneos\*\]" = Manual;/"CODE_SIGN_STYLE[sdk=iphoneos*]" = Automatic;/g' ios/Runner.xcodeproj/project.pbxproj
        
        # Also ensure Pods targets use automatic signing
        if [ -f "ios/Pods/Pods.xcodeproj/project.pbxproj" ]; then
          sed -i '' 's/CODE_SIGN_STYLE = Manual;/CODE_SIGN_STYLE = Automatic;/g' ios/Pods/Pods.xcodeproj/project.pbxproj
          sed -i '' 's/DEVELOPMENT_TEAM = "";/DEVELOPMENT_TEAM = "${{ secrets.APPLE_TEAM_ID }}";/g' ios/Pods/Pods.xcodeproj/project.pbxproj
        fi
        
        # Get dependencies
        flutter pub get
        
        # Configure iOS project for automatic signing
        echo "🔧 Configuring iOS project for automatic signing..."
        cd ios
        # Update Runner project settings
        /usr/libexec/PlistBuddy -c "Set :objects:97C146E61CF9000F007C117D:attributes:TargetAttributes:97C146ED1CF9000F007C117D:DevelopmentTeam ${{ secrets.APPLE_TEAM_ID }}" Runner.xcodeproj/project.pbxproj 2>/dev/null || true
        /usr/libexec/PlistBuddy -c "Set :objects:97C146E61CF9000F007C117D:attributes:TargetAttributes:97C146ED1CF9000F007C117D:ProvisioningStyle Automatic" Runner.xcodeproj/project.pbxproj 2>/dev/null || true
        cd ..
        
        # Build iOS with automatic signing
        flutter build ios --release --no-codesign
        
        # Create archive with automatic signing
        xcodebuild -workspace ios/Runner.xcworkspace \
          -scheme Runner \
          -configuration Release \
          -destination generic/platform=iOS \
          -archivePath build/ios/Runner.xcarchive \
          DEVELOPMENT_TEAM="${{ secrets.APPLE_TEAM_ID }}" \
          CODE_SIGN_STYLE=Automatic \
          -allowProvisioningUpdates \
          archive
          
        # Export IPA
        xcodebuild -exportArchive \
          -archivePath build/ios/Runner.xcarchive \
          -exportPath build/ios/ipa \
          -exportOptionsPlist ios/exportOptions.plist
          
    - name: Upload to TestFlight
      env:
        APP_STORE_CONNECT_ISSUER_ID: ${{ secrets.APP_STORE_CONNECT_ISSUER_ID }}
        APP_STORE_CONNECT_KEY_ID: ${{ secrets.APP_STORE_CONNECT_KEY_ID }}
      run: |
        cd flutter_project
        echo "📤 Uploading to TestFlight..."
        
        # Find the IPA file
        IPA_PATH=$(find build/ios/ipa -name "*.ipa" | head -n 1)
        echo "📱 IPA Path: $IPA_PATH"
        
        # Upload using altool
        xcrun altool --upload-app \
          --type ios \
          --file "$IPA_PATH" \
          --apiKey $APP_STORE_CONNECT_KEY_ID \
          --apiIssuer $APP_STORE_CONNECT_ISSUER_ID \
          --show-progress
          
    - name: Notify completion
      if: always()
      run: |
        if [ ${{ job.status }} == 'success' ]; then
          echo "✅ TestFlight deployment completed successfully!"
          echo "📱 App: $APP_NAME"
          echo "📦 Bundle ID: $BUNDLE_ID"
          echo "🔢 Version: $VERSION ($BUILD_NUMBER)"
        else
          echo "❌ TestFlight deployment failed!"
        fi 